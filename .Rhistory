install.packages("bbmle")
library(bbmle)
install.packages("emdbook")
rtsamp <- read.csv('~/Documents/win-dump/lab-materials/mle/RTSample.csv', col.names = c("RT", "hit"))
head(rtsamp)
save(rtsamp, file = 'data/rtsamp.rds')
load('data/rtsamp.rds')
head(rtsamp)
install.packages("psyphy")
library(multimles)
devtools::document()
devtools::document()
?hello
devtools::document()
?hello
devtools::document()
?hello
devtools::document()
?hello
devtools::document()
?hello
devtools::document()
?hello
str(rtdat)
str(rtdata)
ls()
str(rtsamp)
devtools::document()
?rtsamp
devtools::document()
?rtsamp
save(rtsamp, file = 'data/rtsamp.rda')
devtools::document()
?rtsamp
sum(is.na(rtsamp))
devtools::document()
devtools::document()
?rtsamp
devtools::document()
?rtsamp
devtools::document()
?rtsamp
tools
tools::checkRdaFiles()
tools::checkRdaFiles('man/')
library(multimles)
library(multimles)
devtools::document()
library(multimles)
system.file("extdata", "bigrt.csv", package = "testdat")
system.file("extdata", "bigrt.csv", package = "multimles")
dat <- read.csv('bigrt.csv')
?read.csv
library(multimles)
dat <- read.csv(system.file("extdata", "bigrt.csv", package = 'multimles'))
head(dat)
dat <- read.csv(system.file("extdata", "bigrt.csv", package = 'multimles'), header = FALSE)
head(dat)
?read.table
dat <- read.csv(system.file("extdata", "bigrt.csv", package = 'multimles'), header = FALSE, col.names = c('id', 'RT', 'reachDir', 'hit'))
head(dat4)
head(dat)
isnan
is.nan
is.nan(dat)
str(dat)
aa  <- dat[complete.cases(dat),]
head(aa)
library(dplyr)
head(dat)
typeof(dat)
class(dat)
free_rt <- dat
free_rt <- free_rt[complete.cases(free_rt),]
free_rt <- free_rt[!(free_rt$RT > 0.5),]
free_rt <- free_rt[!(free_rt$RT < 0),]
str(free_rt)
free_rt <- dat
free_rt2 <- free_rt %>%
filter(!is.nan(reachDir), RT < 1, RT > 0)
str(free_rt2)
free_rt2 <- free_rt %>%
filter(!is.nan(reachDir), RT < 0.5, RT > 0)
str(free_rt2)
free_rt <- free_rt[complete.cases(free_rt),]
free_rt <- free_rt[!(free_rt$RT > 0.5),]
free_rt <- free_rt[!(free_rt$RT < 0),]
is.equal(free_rt, free_rt2)
all.equal(free_rt, free_rt2)
str(free_rt)
str(free_rt2)
head(free_rt)
head(free_rt2)
plot(free_rt2$RT - free_rt$RT)
library(multimles)
forced_rt <- read.csv(system.file("extdata", "bigtr.csv", package = 'multimles'),
header = FALSE,
col.names = c('id', 'RT', 'reachDir', 'hit'))
head(forced_rt)
forced_rt <- forced_rt %>% filter(!is.nan(reachDir),RT<0.5, RT>0)
head(forced_rt)
str(forced_rt)
forced_rt2 <- read.csv(system.file("extdata", "bigtr.csv", package = 'multimles'),
header = FALSE,
col.names = c('id', 'RT', 'reachDir', 'hit'))
str(forced_rt)
str(forced_rt2)
library(bbmle)
?bbmle
?mle2
logliksig <- function(mu, sigma, asymptErr, rt, hit){
p1 <- log(1/Ntargs + (asymptErr - 1/Ntargs) *
pnorm(rt, mu, sigma))
p2 <- log(1 - (1/Ntargs + (asymptErr - 1/Ntargs) *
pnorm(rt, mu, sigma)))
-sum(hit %*% p1 + (1 - hit) %*% p2) - alpha * sigma^2
}
logliksig
mu <- 0.3
sigma <- 0.1
asymptErr <- 0.9
start_vals <- list(mu = mu, sigma = sigma, asymptErr = asymptErr)
start_vals
mod1 <- mle2(logliksig,
start = start_vals,
method = "BFGS",
optimizer = "optim",
data = list(rt = df$RT, hit = df$hit),
fixed = list(alpha = 0, Ntargs = 8))
mod1 <- mle2(logliksig,
start = start_vals,
method = "BFGS",
optimizer = "optim",
data = list(rt = forced_rt$RT, hit = forced_rt$hit),
fixed = list(alpha = 0, Ntargs = 8))
logliksig <- function(mu, sigma, asymptErr, rt, hit, alpha, Ntargs){
p1 <- log(1/Ntargs + (asymptErr - 1/Ntargs) *
pnorm(rt, mu, sigma))
p2 <- log(1 - (1/Ntargs + (asymptErr - 1/Ntargs) *
pnorm(rt, mu, sigma)))
-sum(hit %*% p1 + (1 - hit) %*% p2) - alpha * sigma^2
}
mod1 <- mle2(logliksig,
start = start_vals,
method = "BFGS",
optimizer = "optim",
data = list(rt = forced_rt$RT, hit = forced_rt$hit),
fixed = list(alpha = 0, Ntargs = 8))
warnings()
summary(mod1)
mod1 <- mle2(logliksig,
start = start_vals,
method = "L-BFGS-B",
optimizer = "optim",
data = list(rt = forced_rt$RT, hit = forced_rt$hit),
fixed = list(alpha = 0, Ntargs = 8),
lower = c(sigma = 0))
mod1 <- mle2(logliksig,
start = start_vals,
method = "L-BFGS-B",
optimizer = "optim",
data = list(rt = forced_rt$RT, hit = forced_rt$hit),
fixed = list(alpha = 0, Ntargs = 8))
mod1 <- mle2(logliksig,
start = start_vals,
method = "BFGS",
optimizer = "optim",
data = list(rt = forced_rt$RT, hit = forced_rt$hit),
fixed = list(alpha = 0, Ntargs = 8))
mod1
summary(mod1)
p1 <- profile(mod1)
mod1 <- mle2(logliksig,
start = start_vals,
method = "nlminb",
optimizer = "optim",
data = list(rt = forced_rt$RT, hit = forced_rt$hit),
fixed = list(alpha = 0, Ntargs = 8))
mod1 <- mle2(logliksig,
start = start_vals,
method = "Nelder-Mead",
optimizer = "optim",
data = list(rt = forced_rt$RT, hit = forced_rt$hit),
fixed = list(alpha = 0, Ntargs = 8))
mod1
summary(mod1)
mod1 <- mle2(logliksig,
start = start_vals,
method = "nlm",
optimizer = "optim",
data = list(rt = forced_rt$RT, hit = forced_rt$hit),
fixed = list(alpha = 0, Ntargs = 8))
mod1 <- mle2(logliksig,
start = start_vals,
method = "CG",
optimizer = "optim",
data = list(rt = forced_rt$RT, hit = forced_rt$hit),
fixed = list(alpha = 0, Ntargs = 8))
warnings()
summary(mod1)
library(optimx)
mod1 <- mle2(logliksig,
start = start_vals,
method = "BFGS",
optimizer = "nlm",
data = list(rt = forced_rt$RT, hit = forced_rt$hit),
fixed = list(alpha = 0, Ntargs = 8))
warnings()
mod1 <- mle2(logliksig,
start = start_vals,
method = "BFGS",
optimizer = "nlm"inb,
data = list(rt = forced_rt$RT, hit = forced_rt$hit),
fixed = list(alpha = 0, Ntargs = 8))
mod1 <- mle2(logliksig,
start = start_vals,
method = "BFGS",
optimizer = "nlminb",
data = list(rt = forced_rt$RT, hit = forced_rt$hit),
fixed = list(alpha = 0, Ntargs = 8))
library(lme4)
library(psyphy)
?psyphy
aa <- glmer(hit ~ RT + (1|id), data = forced_rt, family = binomial(link = mafc.probit(8)))
summary(aa)
aa <- glmer(hit ~ RT + (1|id), data = forced_rt, family = binomial(link = mafc.probit(8)), control = glmerControl(optimizer = "nloptwrap"))
aa <- glmer(hit ~ RT + (1|id), data = forced_rt, family = binomial(link = mafc.probit(8)))
aa <- glmer(hit ~ RT + (RT|id), data = forced_rt, family = binomial(link = mafc.probit(8)))
aa <- glmer(hit ~ RT + (RT|id), data = forced_rt, family = binomial(link = mafc.probit(8)), control = glmerControl(optimizer = "nloptwrap"))
aa <- glmer(hit ~ RT + (1|id), data = forced_rt, family = binomial(link = mafc.probit(8)))
summary(aa)
aa <- glmer(hit ~ RT + (1|id), data = forced_rt, family = binomial(link = mafc.probit(8)), nAGQ = 10)
summary(aa)
ab <- profile(aa)
plot(ab)
pairs(ab)
?profile.merMod
xyplot(ab)
library(lattice)
xyplot(ab)
library(sjPlot)
sjp.glmer(aa, type = "re.qq")
xyplot(log(ab), absVal = TRUE)
library(glmmTMB)
az <- glmmTMB(hit ~ RT + (1|id), data = forced_rt, family = binomial(link = mafc.probit(8)))
confint(ab)
splom(ab)
head(forced_rt)
forced_rt$pred <- predict(aa)
head(forced_rt)
forced_rt$pred <- predict(aa, type = "response")
head(forced_rt)
plot(hit~pred, data = forced_rt)
plot(pred~RT, data = forced_rt)
plot(hit
~RT, data = forced_rt)
plot(pred~RT, data = forced_rt)
library(ggplot2)
m2 <- glmer(hit ~ RT + (1+RT|id), data = forced_rt, family = binomial(link = mafc.probit(9)))
m2 <- glmer(hit ~ RT + (1+RT|id), data = forced_rt, family = binomial(link = mafc.probit(9)), control = glmerControl(optimizer = "nloptwrap"))
?glmerControl
m2 <- glmer(hit ~ RT + (1+RT|id), data = forced_rt, family = binomial(link = mafc.probit(9)), control = glmerControl(optimizer = "bobyqa"))
library(optimx)
m2 <- glmer(hit ~ RT + (1+RT|id), data = forced_rt, family = binomial(link = mafc.probit(9)), control = glmerControl(optimizer = "optimx", optCtrl = list(method = 'nlminb')))
m2 <- glmer(hit ~ RT + (1+RT|id), data = forced_rt, family = binomial(link = mafc.probit(9)), control = glmerControl(optimizer = "optimx", optCtrl = list(method = 'L-BFGS-B')))
library(nloptr)
m2 <- glmer(hit ~ RT + (1+RT|id), data = forced_rt, family = binomial(link = mafc.probit(9)), control = glmerControl(optimizer = "Nelder-Mead"))
m2 <- glmer(hit ~ RT + (1+RT|id), data = forced_rt, family = binomial(link = mafc.probit(9)), control = glmerControl(optimizer = "Nelder_Mead"))
summary(m2)
anova(m1,m2)
anova(aa,m2)
m2 <- glmer(hit ~ RT + (1|id) +(0+RT|id), data = forced_rt, family = binomial(link = mafc.probit(9)), control = glmerControl(optimizer = "Nelder_Mead"))
m2 <- glmer(hit ~ RT + (1|id) +(0+RT|id), data = forced_rt, family = binomial(link = mafc.probit(8)))
summary(m2)
anova(aa,m2)
df <- forced_rt
df$pred2 <- predict(m2, type = 'response')
plot(pred2~RT, data = forced_rt)
plot(pred2~RT, data = df)
mlme <- glmer(hit ~ RT + (1|id),
data = forced_rt,
family = binomial(link = mafc.probit(8)))
df <- forced_rt
df$pred <- predict(mlme, type = 'response')
mlme2 <- update(mlme, .~.+(0 + RT|id), nAGQ = 1)
anova(mlme, mlme2)
sjp.glmer(mlme2, type = "re.qq")
summary(mlme2)
mlmea <- glmer(hit ~ RT + (RT||id),
data = forced_rt,
family = binomial(link = mafc.probit(8)))
summary(mlmea)
summary(mlme2)
subdat <- dplyr(filter(forced_rt, id == 1))
mod1 <- mle2(llsig,
start = start_vals,
method = "BFGS",
optimizer = "optim",
data = list(rt = fsubdat$RT, hit = subdat$hit),
fixed = list(alpha = 0, Ntargs = 8))
llsig <- function(mu, sigma, asymptErr, rt, hit, alpha, Ntargs){
p1 <- log(1/Ntargs + (asymptErr - 1/Ntargs) *
pnorm(rt, mu, sigma))
p2 <- log(1 - (1/Ntargs + (asymptErr - 1/Ntargs) *
pnorm(rt, mu, sigma)))
-sum(hit %*% p1 + (1 - hit) %*% p2) - alpha * sigma^2
}
start_vals <- list(mu = 0.3, sigma = 0.1, asymptErr = 0.9)
subdat <- dplyr::filter(forced_rt, id == 1)
mod1 <- mle2(llsig,
start = start_vals,
method = "BFGS",
optimizer = "optim",
data = list(rt = fsubdat$RT, hit = subdat$hit),
fixed = list(alpha = 0, Ntargs = 8))
mod1 <- mle2(llsig,
start = start_vals,
method = "BFGS",
optimizer = "optim",
data = list(rt = subdat$RT, hit = subdat$hit),
fixed = list(alpha = 0, Ntargs = 8))
warnings()
subdat
subdat <- dplyr::filter(forced_rt, id == 2)
mod1 <- mle2(llsig,
start = start_vals,
method = "BFGS",
optimizer = "optim",
data = list(rt = subdat$RT, hit = subdat$hit),
fixed = list(alpha = 0, Ntargs = 8))
subdat <- dplyr::filter(forced_rt, id == 3)
mod1 <- mle2(llsig,
start = start_vals,
method = "BFGS",
optimizer = "optim",
data = list(rt = subdat$RT, hit = subdat$hit),
fixed = list(alpha = 0, Ntargs = 8))
mod1
summary(mod1)
warnings()
lmeprof2 <- profile(mlme2, verbose = TRUE)
splom(lmeprof2)
xyplot(lmeprof2)
?profile.merMod
splom(lmeprof2)
xyplot(log(lmeprof2), absVal=TRUE)
xyplot(lmeprof2, absVal=TRUE)
confint(lmeprof2)
devtools::use_vignette('MLEs')
mlme <- glmer(hit ~ RT + (1|id),
data = forced_rt,
family = binomial(link = mafc.probit(8)))
library(devtools)
?use_vignette
mlme2 <- update(mlme, .~. + (0 + RT|id)) # enforcing correlation doesn't work
anova(mlme, mlme2)
xyplot(lmeprof2)
m2 <- update(mlme, data = free_rt)
summary(m2)
m22 <- update(m2, .~.+(0+RT
|id))
anova(m2, m22)
summary(m22)
m22 <- glmer(hit ~ RT +(RT|id), data = free_rt, family = binomial(link = mafc.probit(8)))
summary(m22)
VarCorr(mlme)
VarCorr(m22)
as.data.frame(VarCorr(m22))
forced_rt <- read.csv(system.file("extdata", "bigtr.csv", package = 'multimles'),
header = FALSE,
col.names = c('id', 'RT', 'reachDir', 'hit'))
forced_rt <- forced_rt %>% filter(!is.nan(reachDir), RT < 0.5, RT > 0)
mlme <- glmer(hit ~ RT + (1|id),
data = forced_rt,
family = binomial(link = mafc.probit(8)))
mlme2 <- update(mlme, .~. + (0 + RT|id)) # enforcing correlation doesn't work
anova(mlme, mlme2)
lmeprof2 <- profile(mlme2)
xyplot(lmeprof2)
splom(lmeprof2)
llsig <- function(mu, sigma, asymptErr, rt, hit, Ntargs){
p1 <- log(1/Ntargs + asymptErr * pnorm(rt, mu, sigma)*(1 - 1/Ntargs))
p2 <- log(1 - (1/Ntargs + asymptErr * pnorm(rt, mu, sigma) * (1 - 1/Ntargs)))
-sum(hit %*% p1 + (1 - hit) %*% p2)
}
start_vals <- list(mu = 0.3, sigma = 0.1, asymptErr = 0.9)
subdat <- dplyr::filter(forced_rt, id == 3)
mod1 <- mle2(llsig,
start = start_vals,
method = "BFGS",
optimizer = "optim",
data = list(rt = subdat$RT, hit = subdat$hit),
fixed = list(Ntargs = 8))
mod1
summary(mod1)
subdat <- dplyr::filter(forced_rt, id == 4)
mod1 <- mle2(llsig,
start = start_vals,
method = "BFGS",
optimizer = "optim",
data = list(rt = subdat$RT, hit = subdat$hit),
fixed = list(Ntargs = 8))
summary(mod1)
subdat <- dplyr::filter(forced_rt, id == 3)
mod1 <- mle2(llsig,
start = start_vals,
method = "BFGS",
optimizer = "optim",
data = list(rt = subdat$RT, hit = subdat$hit),
fixed = list(Ntargs = 8))
summary(mod1)
aa <- profile(mod1)
plot(aa)
subdat <- dplyr::filter(forced_rt, id == 1)
mod1 <- mle2(llsig,
start = start_vals,
method = "BFGS",
optimizer = "optim",
data = list(rt = subdat$RT, hit = subdat$hit),
fixed = list(Ntargs = 8))
subdat <- dplyr::filter(forced_rt, id == 5)
mod1 <- mle2(llsig,
start = start_vals,
method = "BFGS",
optimizer = "optim",
data = list(rt = subdat$RT, hit = subdat$hit),
fixed = list(Ntargs = 8))
summary(mod1)
ab <- profile(mod1)
plot(ab)
data_orange <-
structure(list(n = 35, y = c(30, 58, 87, 115, 120, 142, 145,
33, 69, 111, 156, 172, 203, 203, 30, 51, 75, 108, 115, 139, 140,
32, 62, 112, 167, 179, 209, 214, 30, 49, 81, 125, 142, 174, 177
), t = c(118, 484, 664, 1004, 1231, 1372, 1582, 118, 484, 664,
1004, 1231, 1372, 1582, 118, 484, 664, 1004, 1231, 1372, 1582,
118, 484, 664, 1004, 1231, 1372, 1582, 118, 484, 664, 1004, 1231,
1372, 1582), M = 5, ngroup = c(7, 7, 7, 7, 7), m = 3, multiply = 1000,
n_par = -5, loglik = -94.8143, gradient = -8.05132e-06), .Names = c("n",
"y", "t", "M", "ngroup", "m", "multiply", "n_par", "loglik",
"gradient"))
data_orange
