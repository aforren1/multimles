geom_histogram(data = temp, aes(x = val, y = ..count../sum(..count..),
fill = 'pred'), bins = 40, alpha = .7) +
geom_vline(data = temp2, aes(xintercept = xx, colour = 'original est'))
facet_wrap(~id)
ggplot(free_rt, aes(x = RT)) +
geom_histogram(aes(fill = 'raw', y = ..count../sum(..count..)),
bins = 40, alpha = .7) +
geom_histogram(data = temp, aes(x = val, y = ..count../sum(..count..),
fill = 'pred'), bins = 40, alpha = .7) +
geom_vline(data = temp2, aes(xintercept = xx, colour = 'original est')) +
facet_wrap(~id)
temp2 <- data.frame(xx = boots$t0, id = unique(free_rt$id))
ggplot(free_rt, aes(x = RT)) +
geom_histogram(aes(fill = 'raw', y = ..count../sum(..count..)),
bins = 40, alpha = .7) +
geom_histogram(data = temp, aes(x = val, y = ..count../sum(..count..),
fill = 'pred'), bins = 40, alpha = .7) +
geom_vline(data = temp2, aes(xintercept = xx, colour = 'original est')) +
facet_wrap(~id)
ggplot(free_rt, aes(x = RT)) +
geom_histogram(aes(fill = 'raw', y = ..count../sum(..count..)),
bins = 40, alpha = .7) +
geom_histogram(data = temp, aes(x = val, y = ..count../sum(..count..),
fill = 'pred'), bins = 40, alpha = .7) +
geom_vline(data = temp2, aes(xintercept = xx, colour = 'original est'), size = 2) +
facet_wrap(~id)
ggplot(free_rt, aes(x = RT)) +
geom_histogram(aes(fill = 'raw', y = ..count../sum(..count..)),
bins = 40, alpha = .7) +
geom_histogram(data = temp, aes(x = val, y = ..count../sum(..count..),
fill = 'pred'), bins = 40, alpha = .7) +
geom_vline(data = temp2, aes(xintercept = xx, colour = 'original est'), size = 2,
linetype = 'longdash') +
facet_wrap(~id)
ggplot(free_rt, aes(x = RT)) +
geom_histogram(aes(fill = 'raw', y = ..count../sum(..count..)),
bins = 40, alpha = .7) +
geom_histogram(data = temp, aes(x = val, y = ..count../sum(..count..),
fill = 'pred'), bins = 40, alpha = .7) +
geom_vline(data = temp2, aes(xintercept = xx), size = 1, colour = 'black',
linetype = 'longdash') +
facet_wrap(~id)
ggplot(free_rt, aes(x = RT)) +
geom_histogram(aes(fill = 'raw', y = ..count../sum(..count..)),
bins = 30, alpha = .7) +
geom_histogram(data = temp, aes(x = val, y = ..count../sum(..count..),
fill = 'pred'), bins = 30, alpha = .7) +
geom_vline(data = temp2, aes(xintercept = xx), size = 1, colour = 'black',
linetype = 'longdash') +
facet_wrap(~id)
ggplot(free_rt, aes(x = RT)) +
geom_histogram(aes(fill = 'raw', y = ..count../sum(..count..)), # rescale counts
bins = 20, alpha = .7) +
geom_histogram(data = temp, aes(x = val, y = ..count../sum(..count..),
fill = 'pred'), bins = 20, alpha = .7) +
geom_vline(data = temp2, aes(xintercept = xx), size = 1, colour = 'black',
linetype = 'longdash') +
facet_wrap(~id)
mlme <- lmer(formula = RT ~ 1 + (1 | id), data = free_rt) # Use REML: does this count as "small"?
boots <- bootMer(mlme, FUN = function(x)
predict(x, newdata = data.frame(id = unique(free_rt$id))),
seed = 1, nsim = 10000)
temp <- data.frame(boots$t)
names(temp) <- dimnames(boots$t)[[2]]
temp <- gather(temp, id, val) # from tidyr
temp2 <- data.frame(xx = boots$t0, id = unique(free_rt$id))
ggplot(free_rt, aes(x = RT)) +
geom_histogram(aes(fill = 'raw', y = ..count../sum(..count..)), # rescale counts
bins = 20, alpha = .7) +
geom_histogram(data = temp, aes(x = val, y = ..count../sum(..count..),
fill = 'pred'), bins = 20, alpha = .7) +
geom_vline(data = temp2, aes(xintercept = xx), size = 1, colour = 'black',
linetype = 'longdash') +
facet_wrap(~id)
ggplot(free_rt, aes(x = RT)) +
geom_histogram(aes(fill = 'raw', y = ..count../sum(..count..)), # rescale counts
bins = 30, alpha = .7) +
geom_histogram(data = temp, aes(x = val, y = ..count../sum(..count..),
fill = 'pred'), bins = 30, alpha = .7) +
geom_vline(data = temp2, aes(xintercept = xx), size = 1, colour = 'black',
linetype = 'longdash') +
facet_wrap(~id)
boots
str(print(boots))
boots$statistic()
boots$statistic
print(boots)
str(print(boots))
?pdDiag
devtools::install(build_vignettes = TRUE)
rmarkdown::render('MLEs.Rmd')
rmarkdown::render('vignettes/MLEs.Rmd')
library(multimles)
warnings()
?bootMer
az <- profile(mlme, verbose = TRUE)
xyplot(az)
xyplot(log(az), absVal = TRUE)
splom(az)
splom(log(az))
?profile.merMod
xyplot(az, absVal = TRUE)
splom(logProf(az, ranef = FALSE))
densitypplot(az)
densityplot(az)
az <- profile(mlme, delta.cutoff = 1/16)
densityplot(az)
xyplot(log(az))
xyplot(log(az), absVal = TRUE)
splom(az)
confint(a)
confint(az)
plot(ranef(mlme))
plot(ranef(mnlme))
mod1
summary(mod1)
coef(mnlme)
rmarkdown::render('vignettes/MLEs.Rmd')
VarPower
VarPower()
varPower()
aa <- update(mnlme, weights = varPower())
mnlme
nlme(hit ~ 1/8 + asym * pnorm(RT, mu, sigma), data = forced_rt,
fixed = asym + mu + sigma ~ 1, random = pdDiag(asym + mu + sigma ~ 1),
start = c(asym = .9, mu = .25, sigma = .04), groups = ~id, weights = varPower())
nlme(hit ~ 1/8 + asym * pnorm(RT, mu, sigma), data = forced_rt,
fixed = asym + mu + sigma ~ 1, random = pdDiag(asym + mu + sigma ~ 1),
start = c(asym = .9, mu = .25, sigma = .04), groups = ~id, weights = varPower(form = ~RT))
azz <- nlme(hit ~ 1/8 + asym * pnorm(RT, mu, sigma), data = forced_rt,
fixed = asym + mu + sigma ~ 1, random = pdDiag(asym + mu + sigma ~ 1),
start = c(asym = .9, mu = .25, sigma = .04), groups = ~id, weights = varPower(form = ~RT))
anova(mnlme, azz)
summary(azz)
intervals(azz)
plot(fitted(mnlme), residuals(mnlme))
arm::binnedplot(fitted(mnlme), residuals(mnlme))
arm::binnedplot(fitted(azz), residuals(azz))
arm::binnedplot(fitted(mnlme), residuals(mnlme), nclass = 50)
arm::binnedplot(fitted(mnlme), residuals(mnlme), nclass = 90)
arm::binnedplot(fitted(azz), residuals(azz), nclass = 90)
plot(fitted(mnlme), fitted(azz))
plot(fitted(mnlme)- fitted(azz))
fixef(azz)
fixef(mnlme)
arm::binnedplot(fitted(mnlme), residuals(mnlme), nclass = 150)
arm::binnedplot(fitted(azz), residuals(azz), nclass = 150)
anova(mnlme, azz)
formula(mnlme)
formula(azz)
summary(azz)
summary(mnlme)
VarCorr(mnlme)
VarCorr(azz)
azz2 <- update(mnlme, weights = varExp(~RT))
azz2 <- update(mnlme, weights = varExp(form = ~RT))
anova(azz,azz2)
summary(azz2)
plot(fitted(azz2), fitted(mnlme))
plot(fitted(azz2)- fitted(mnlme))
?varExp
plot(fitted(azz2)- fitted(azz))
azz3 <- update(mnlme, weights = varFixed(form = ~RT))
azz3 <- update(mnlme, weights = varFixed(~RT))
azz3 <- update(mnlme, weights = varIdent(form = ~RT))
azz3 <- update(mnlme, weights = varConstPower(form = ~RT))
anova(azz2,azz3)
anova(azz3,azz2)
plot(azz2)
plot(azz3)
plot(mnlme)
plot(fitted(mnlme),residuals(mnlme))
arm::binnedplot(fitted(azz2), residuals(azz2), nclass = 150)
arm::binnedplot(fitted(mnlme), residuals(mnlme), nclass = 150)
arm::binnedplot(fitted(azz2), residuals(azz2), nclass = 300)
arm::binnedplot(fitted(mnlme), residuals(mnlme), nclass = 300)
plot(fitted(azz2) - fitted(mnlme))
varFixed
varFixed?
?varFixed
azz3 <- update(mnlme, weights = varFixed(~RT))
varFixed(~RT)
VarCorr(mlme)
VarCorr(mnlme)
intervals(mnlme)
coef(nmle)
coef(mnlme)
coef(mnlme)[,1]
coef(mnlme)[,1]+1/8
rmarkdown::render('vignettes/MLEs.Rmd')
aa <- nlme(hit ~ 1/8 + asym * pnorm(RT, mu, sigma) * 7/8,
data = forced_rt,
fixed = asym + mu + sigma ~ 1,
random = pdDiag(asym + mu + sigma ~ 1),
start = c(asym = .9, mu = .25, sigma = .04),
groups = ~id,
weights = varExp(form = ~RT))
aa
summary(aa)
rmarkdown::render('vignettes/MLEs.Rmd')
VarCorr(mnlme)
VarCorr(mlme)
intervals(mnlme)
VarCorr(mlme)
VarCorr(mlme)[1]
VarCorr(mlme)$id
attr(VarCorr(mlme)$id,"stddev")
boo2 <- bootMer(mlme, FUN = attr(VarCorr(mlme)$id,"stddev"), seed = 1, nsim= 500)
boo2 <- bootMer(mlme, FUN = function(x) attr(VarCorr(x)$id,"stddev"), seed = 1, nsim= 500)
boo2
hist(boo2$t[,1])
confint(boo2)
boot.ci(boo2)
?boot.ci
boot.ci(boo2, type = "perc")
devtools::install_github("hadley/svglite")
library(TMB)
?MakeADFun
dat$rt <- free_rt$RT
dat <- data.frame
dat
dat <- data.frame()
dat
dat$rt <- free_rt$RT
dat <- list()
dat[[1]] <- free_rt$RT
dat
names(dat)
names(dat) <- 'rt'
head(dat)
mnmle$call
mnlme$call
rmarkdown::render('vignettes/MLEs.Rmd')
?Variogram
Variogram(mnlme)
plot(Variogram(mnlme))
rmarkdown::render('vignettes/MLEs.Rmd')
library(multimles)
?simulate.lme
aa <- simulate(mnmle, nsim= 10, seed = 1)
aa <- simulate(mnlme, nsim= 10, seed = 1)
mnlme2<- nlme(hit ~ 1/8 + 7/8 * asym * pnorm(RT, mu, sigma),
data = forced_rt,
fixed = asym + mu + sigma ~ 1,
random = pdDiag(asym + mu + sigma ~ 1),
start = c(asym = .9, mu = .25, sigma = .04),
groups = ~id)
aa <- simulate(mnlme2, nsim= 10, seed = 1)
mnlme2<- nlme(hit ~ 1/8 + 7/8 * asym * pnorm(RT, mu, sigma),
data = forced_rt,
fixed = asym + mu + sigma ~ 1,
random = pdDiag(asym + mu + sigma ~ 1|id),
start = c(asym = .9, mu = .25, sigma = .04),
groups = ~id)
mnlme2<- nlme(hit ~ 1/8 + 7/8 * asym * pnorm(RT, mu, sigma),
data = forced_rt,
fixed = asym + mu + sigma ~ 1,
random = pdDiag(asym + mu + sigma ~ 1|id),
start = c(asym = .9, mu = .25, sigma = .04))
?nlme
mnlme2<- nlme(hit ~ 1/8 + 7/8 * asym * pnorm(RT, mu, sigma),
data = forced_rt,
fixed = asym + mu + sigma ~ 1,
random = pdDiag(asym + mu + sigma ~ 1)|id,
start = c(asym = .9, mu = .25, sigma = .04))
mnlme2<- nlme(hit ~ 1/8 + 7/8 * asym * pnorm(RT, mu, sigma),
data = forced_rt,
fixed = asym + mu + sigma ~ 1,
random =asym + mu + sigma ~ 1|id,
start = c(asym = .9, mu = .25, sigma = .04))
mnlme2
aa <- simulate(mnlme2, nsim= 10, seed = 1)
df
whos
stats::df
stats::df(1)
stats::df(1,4,3)
stats::df(1,4,4)
help(MakeADFun)
source("mvrw.R")
ls
ls()
aaa
aa
devtools::install_github("ropensci/plotly")
library(plotly)
dat <- data.frame(x = 1:10, y = c(10,2,3,5,8,2,3,1,10,2))
dat
pt <- ggplot(dat,aes(x ,y)) + geom_line()
pt
ggplotly(pt)
devtools::install_github("ropensci/plotly", ref = "fix/path-size")
library(plotly)
dat <- data.frame(x = 1:10, y = c(10,2,3,5,8,2,3,1,10,2))
pt <- ggplot(dat,aes(x ,y)) + geom_line()
pt
ggplotly(pt)
g <- ggplot(economics, aes(date, unemploy)) + geom_line()
g
ggplotly(g)
library(rstan)
install.packages("rstan")
dat <- read.delim("~/Documents/BLAM/archive/jings-forcedata/summary_paretic.dat")
head(dat)
library(lme4)
bpfun <- function(bp) {
model <- lmer(indivIdx ~ x1(mvc_norm,bp) + x2(mvc_norm,bp) + (1+x1(mvc_norm,bp)+x2(mvc_norm,bp)|week), data=datP,REML=F)
deviance(model,REML=F)
}
# search for optimal solution of bp, using MLE
search.range <- c(min(datP$mvc_norm),max(datP$mvc_norm))
bpfun.opt    <- optimize(bpfun,interval=search.range)
bp           <- bpfun.opt$minimum
# fitting the model with the optimal solution of bp
model1 <- lmer(indivIdx ~ x1(mvc_norm,bp) + x2(mvc_norm,bp) + (1+x1(mvc_norm,bp)+x2(mvc_norm,bp)|week), data=datP,REML=F)
bp = 0.5 # first guess of the breaking point
x1 <- function(x,bp) ifelse(x<bp,x,0)
x2 <- function(x,bp) ifelse(x<bp,0,x)
# 2-level model with "week" at the second level (random effect)
# at the first level, two segments of mvc_norm separated by bp
bpfun <- function(bp) {
model <- lmer(indivIdx ~ x1(mvc_norm,bp) + x2(mvc_norm,bp) + (1+x1(mvc_norm,bp)+x2(mvc_norm,bp)|week), data=dat,REML=F)
deviance(model,REML=F)
}
# search for optimal solution of bp, using MLE
search.range <- c(min(datP$mvc_norm),max(datP$mvc_norm))
bpfun.opt    <- optimize(bpfun,interval=search.range)
bp           <- bpfun.opt$minimum
# fitting the model with the optimal solution of bp
model1 <- lmer(indivIdx ~ x1(mvc_norm,bp) + x2(mvc_norm,bp) + (1+x1(mvc_norm,bp)+x2(mvc_norm,bp)|week), data=dat,REML=F)
model1
aa <- profile(model1)
library(lattice)
plot(aa)
xyplot(aa)
xyplot(aa, absVal = TRUE)
install.packages("refund")
library(refund)
data(DTI)
DTI1 <- DTI[DTI$visit==1 & DTI$case==1, ]
DTI2 <- DTI1[complete.cases(DTI1), ]
fit1 <- pfr(pasat ~ af(cca, k=c(8,1), m=list(c(2,2), c(0,0)), basistype='te'), data=DTI2)
vis.pfr(fit1)
fit1
?pfr
DTI.re <- DTI[complete.cases(DTI$cca),]
DTI.re$ID <- factor(DTI.re$ID)
fit.re <- pfr(pasat ~ lf(cca, k=30) + re(ID), data=DTI.re)
coef.re <- coef(fit.re)
par(mfrow=c(1,2))
plot(fit.re)
fit.re
cca.tmat
?cca.tmat
?s
?pfr
DTI.re <- DTI[complete.cases(DTI$cca),]
DTI.re$ID <- factor(DTI.re$ID)
fit.re <- pfr(pasat ~ lf(cca, k=30) + re(ID), data=DTI.re, method = 'gamm4')
DTI.re <- DTI[complete.cases(DTI$cca),]
DTI.re$ID <- factor(DTI.re$ID)
fit.re <- pfr(pasat ~ lf(cca, k=30) + re(ID), data=DTI.re, method = 'gamm')
DTI.re <- DTI[complete.cases(DTI$cca),]
DTI.re$ID <- factor(DTI.re$ID)
fit.re <- pfr(pasat ~ lf(cca, k=30) + re(ID), data=DTI.re)
fit.re
summary(fit.re)
methods(class = class(fit.re))
plot(fit.re)
coef(fit.re)
library(lme4)
dat <- structure(list(school = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L,
3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,
4L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L,
6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 8L,
8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 9L, 9L, 9L, 9L, 9L, 9L, 9L,
9L, 9L, 9L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L), .Label = c("1",
"2", "3", "4", "5", "6", "7", "8", "9", "10"), class = "factor"),
student = 1:100, hrs = c(0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L,
8L, 9L, 0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 0L, 1L, 2L,
3L, 4L, 5L, 6L, 7L, 8L, 9L, 0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L,
8L, 9L, 0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 0L, 1L, 2L,
3L, 4L, 5L, 6L, 7L, 8L, 9L, 0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L,
8L, 9L, 0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 0L, 1L, 2L,
3L, 4L, 5L, 6L, 7L, 8L, 9L, 0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L,
8L, 9L), mathach = c(100, 96, 92, 88, 84, 80, 76, 72, 68,
65, 95, 92, 89, 86, 83, 80, 77, 74, 71, 69, 90, 88, 86, 84,
82, 80, 78, 76, 74, 71, 85, 84, 83, 82, 81, 80, 79, 78, 77,
77, 80, 79.5, 79, 78.5, 78, 77.5, 77, 76.5, 76, 76, 75, 75.5,
76, 76.5, 77, 77.5, 78, 78.5, 79, 80, 70, 71, 72, 73, 74,
75, 76, 77, 78, 80, 65, 67, 69, 71, 73, 75, 77, 79, 81, 82,
60, 63, 66, 69, 72, 75, 78, 81, 84, 86, 55, 59, 63, 67, 71,
75, 79, 83, 87, 93), freered = c(30L, 30L, 30L, 30L, 30L,
30L, 30L, 30L, 30L, 30L, 27L, 27L, 27L, 27L, 27L, 27L, 27L,
27L, 27L, 27L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L,
25L, 24L, 24L, 24L, 24L, 24L, 24L, 24L, 24L, 24L, 24L, 20L,
20L, 20L, 20L, 20L, 20L, 20L, 20L, 20L, 20L, 16L, 16L, 16L,
16L, 16L, 16L, 16L, 16L, 16L, 16L, 13L, 13L, 13L, 13L, 13L,
13L, 13L, 13L, 13L, 13L, 11L, 11L, 11L, 11L, 11L, 11L, 11L,
11L, 11L, 11L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 3L,
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L)), .Names = c("school",
"student", "hrs", "mathach", "freered"), row.names = c(NA, -100L
), class = "data.frame")
head(dat)
m1 <- lmer(formula = mathach ~ 1 + freered + (1 + hrs | school), data = dat)
str(dat$hrs)
str(as.factor(dat$hrs))
summary(m1)
center(hrs)
str(as.factor(dat$hrs))
mean(c(0,1,2,3,4,5,6,7,8,9,10))
median(c(0,1,2,3,4,5,6,7,8,9,10))
m1 <- lmer(formula = mathach ~ 1 + freered + (1 + I(hrs - 5) | school), data = dat)
m1
summary(m1)
head(dat)
dat$hrs2 <- dat$hrs - 5
dat$freered2 <- dat$freered - mean(dat$freered)
m1 <- lmer(formula = mathach ~ 1 + freered2 + (1 + hrs2 | school), data = dat)
m1
summary(m1)
dat$hrs2 <- dat$hrs - mean(dat$hrs)
m1
m1 <- lmer(formula = mathach ~ 1 + freered2 + (1 + hrs2 | school), data = dat)
m1
summary(m1)
VarCorr(m1)
m1 <- lmer(formula = mathach ~ 1 + freered2 + hrs2+ (1 + hrs2 | school), data = dat)
m1
summary(m1)
m1 <- lmer(formula = mathach ~ 1 + freered2 + hrs2+ (1 + freered2 | school), data = dat)
m1
summary(m1)
m1 <- lmer(formula = mathach ~ 1 + freered2* hrs2+ (1 + freered2 | school), data = dat)
m1
summary(m1)
VarCorr(m1)
m1 <- lmer(formula = mathach ~ 1 + freered2* hrs2+ (1 + hrs2 | school), data = dat)
m1
summary(m1)
VarCorr(m1)
m1 <- lmer(formula = mathach ~ 1 + freered* hrs+ (1 + hrs | school), data = dat)
m1
summary(m1)
m1 <- lmer(formula = mathach ~ 1 + freered2* hrs2+ (1 + hrs2 | school), data = dat)
fixef(m1)
fixef(update(m1, . ~ freered * hrs + (hrs|school)))
VarCorr(m1)
summary(m1)
summary(m1)
str(summary(m1))
summary(m1)$varcor
summary(m1)
summary(m1, corr = FALSE)
library(zoo)
?rollmean
library(lme4)
head(cbpp)
m1 <- glmer(incidence/size ~ herd + (1|period), data = cbpp, family = binomial, weights = size)
m1
summary(m1)
m1 <- glmer(incidence/size ~ period + (1|herd), data = cbpp, family = binomial, weights = size)
m1
summary(m1)
a1 <- fitted(m1, type = "response")
a2 <- residuals(m1, type = "response")
plot(a1,a2)
plot(m1)
b1 <- predict(m1)
b2 <- resid(m1)
plot(b1,b2)
source('~/.active-rstudio-document', echo=TRUE)
plot(predict(mnlme), predict(mnlme2))
plot(predict(mnlme)-predict(mnlme2))
anova(mnlme, mnlme2)
str(mnlme)
?nlme
nlme
methods("nlme")
str(mnlme2)
mnlme$dims
mnlme$map
mnlme$fixDF
str$nlme
str(nlme)
str(mnlme)
mnlme$numIter
str(mnlme)
arm::binnedplot(x = fitted(mnlme2), y = residuals(mnlme2))
arm::binnedplot(x = fitted(mnlme2), y = residuals(mnlme2), nclass = 50)
arm::binnedplot(x = fitted(mnlme2), y = residuals(mnlme2), nclass = 60)
anova(mnlme, mnlme2)
AIC(mnlme)
anova(mnlme2, mnlme)
plot(fitted(mnlme2)- fitted(mnlme))
plot(fitted(mnlme2)- fitted(mnlme), type = 'l')
?mnlme
?nlme
library(lme4)
nlmer(hit ~ 1/8 + 7/8*asym*pnorm(RT, mu, sigma) ~ (asym|id) + (mu|id)+(sigma|id), data = forced_rt, start = c(asym = .9, mu = .2, sigma = .05))
?nlmer
nform <- 1/8 + 7/8*asym*pnorm(RT, mu, sigma)
nform <- ~1/8 + 7/8*asym*pnorm(RT, mu, sigma)
nform
deriv(nform, namevec = c('RT', 'asym','mu','sigma'))
deriv(nform, namevec = c('asym','mu','sigma'), function.arg = c('RT','asym','mu','sigma'))
nfun <- deriv(nform, namevec = c('asym','mu','sigma'), function.arg = c('RT','asym','mu','sigma'))
nfun
nlmer(hit ~ nfun(RT,asym,mu,sigma) ~ mu | id, data = forced_rt)
nlmer(hit ~ nfun(RT,asym,mu,sigma) ~ mu | id, data = forced_rt, start = c(asym = .9, mu = .25, sigma = .04))
nlmer(hit ~ nfun(RT,asym,mu,sigma) ~ asym + mu + sigma | id, data = forced_rt, start = c(asym = .9, mu = .25, sigma = .04))
